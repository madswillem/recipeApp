package components

import (
    "strconv"
    "fmt"
)

// New helper function to determine health color based on score
func getHealthColor(score int) string {
    if score < 40 {
        return "#ef4444" // red for low score
    } else if score < 70 {
        return "#f59e0b" // yellow for mid score
    }
    return "#22c55e" // green for high score
}

type RecipeCardInfo struct {
    ID          string
    Name        string
    Description string
    HealthScore int
    Difficulty  string
    CookingTime int
    ImageURL    string
    Rating      float64
    Scale       float64 // New scale parameter (1.0 is default size)
}

templ RecipeCard(recipe RecipeCardInfo) {
    {{if recipe.Scale == 0 {
         recipe.Scale = 1.0
    }}}
    
    <div id={ "recipe-card-" + recipe.ID } class="recipe-card" style={ fmt.Sprintf("width: %fpx; min-height: %fpx;", 450*recipe.Scale, 600*recipe.Scale) }>
        <div id={ "recipe-image-" + recipe.ID } class="recipe-image">
            <img id={ "recipe-img-" + recipe.ID } src={ recipe.ImageURL } alt={ recipe.Name }/>
        </div>
        <div id={ "recipe-content-" + recipe.ID } class="recipe-content">
            <div id={ "recipe-header-" + recipe.ID } class="recipe-header">
                <h3 id={ "recipe-title-" + recipe.ID } class="recipe-title">{ recipe.Name }</h3>
                <div id={ "health-progress-" + recipe.ID } class="health-progress">
                    <svg id={ "health-svg-" + recipe.ID } width="64" height="64" viewBox="0 0 64 64">
                        <circle id={ "health-circle-bg-" + recipe.ID } cx="32" cy="32" r="26" fill="none" class="health-circle-bg"/>
                        <circle id={ "health-circle-progress-" + recipe.ID } cx="32" cy="32" r="26" fill="none" class="health-circle-progress" 
                                style={ fmt.Sprintf("stroke-dashoffset: %f; stroke: %s", 163.36-(163.36*float64(recipe.HealthScore)/100), getHealthColor(recipe.HealthScore)) }/>
                        <text id={ "health-text-" + recipe.ID } x="50%" y="50%" dy="0" class="health-text" 
                            style={ fmt.Sprintf("fill: %s", getHealthColor(recipe.HealthScore)) }>{ strconv.Itoa(recipe.HealthScore) }</text>
                    </svg>
                </div>
            </div>
            <div id={ "recipe-meta-" + recipe.ID } class="recipe-meta">
                <div id={ "meta-time-" + recipe.ID } class="meta-item">
                    <svg id={ "time-icon-" + recipe.ID } width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M12 2C6.5 2 2 6.5 2 12s4.5 10 10 10 10-4.5 10-10S17.5 2 12 2zm0 18c-4.4 0-8-3.6-8-8s3.6-8 8-8 8 3.6 8 8-3.6 8-8 8zm.5-13H11v6l5.2 3.2.8-1.3-4.5-2.7V7z"/>
                    </svg>
                    <span id={ "time-text-" + recipe.ID }>{ strconv.Itoa(recipe.CookingTime) } min</span>
                </div>
                <div id={ "meta-rating-" + recipe.ID } class="meta-item">
                    <svg id={ "rating-icon-" + recipe.ID } width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z"/>
                    </svg>
                    <span id={ "rating-text-" + recipe.ID }>{ fmt.Sprintf("%.1f", recipe.Rating) }</span>
                </div>
                <div id={ "meta-difficulty-" + recipe.ID } class="meta-item">
                    <svg id={ "difficulty-icon-" + recipe.ID } width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round">
                        <circle cx="4" cy="4" r="1.5"/>
                        <line x1="4" y1="5.7" x2="4" y2="9"/>
                        <line x1="4" y1="6" x2="9" y2="7"/>
                        <circle cx="12" cy="7" r="3"/>
                    </svg>
                    <span id={ "difficulty-text-" + recipe.ID }>{ recipe.Difficulty }</span>
                </div>
            </div>
            <p id={ "recipe-description-" + recipe.ID } class="recipe-description">{ recipe.Description }</p>
        </div>
    </div>

    <style>
        .recipe-card {
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            background: rgb(255, 255, 255);
            margin: 0 auto;
        }

        .recipe-image {
            height: 50%;
            overflow: hidden;
        }

        .recipe-image img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .recipe-content {
            padding: calc(1rem * var(--scale, 1));
        }

        .recipe-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 0.5rem;
        }

        .recipe-title {
            margin: 0;
            font-size: calc(1.5rem * var(--scale, 1));
            font-weight: 600;
            color: #2d3748;
        }

        .recipe-meta {
            display: flex;
            justify-content: space-between;
            margin: calc(1rem * var(--scale, 1)) 0;
            color: #4a5568;
            padding: 0 calc(0.5rem * var(--scale, 1));
        }

        .meta-item, .rating {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            min-width: 16px;
            justify-content: center;
        }

        .meta-item svg, .rating svg {
            width: calc(24px * var(--scale, 1));
            height: calc(24px * var(--scale, 1));
        }

        .meta-item span, .rating span, .health-text {
            font-size: calc(1.1rem * var(--scale, 1));
            font-weight: 500;
        }

        .recipe-description {
            margin: 0;
            font-size: calc(1rem * var(--scale, 1));
            color: #444;
            line-height: 1.5;
        }

        .health-progress {
            position: relative;
        }

        .health-circle-bg {
            stroke: rgba(0, 0, 0, 0.2);
            stroke-width: 10;
        }

        .health-circle-progress {
            stroke: #22c55e;
            stroke-width: 10;
            stroke-linecap: round;
            stroke-dasharray: 163.36;
            transform: rotate(-90deg);
            transform-origin: 50% 50%;
            transition: stroke-dashoffset 0.5s ease-in-out;
        }

        .health-text {
            font-size: 1.4rem;
            padding: 0;
            text-anchor: middle;
            dominant-baseline: middle;;
            font-weight: bolder;
        }

        .health-progress svg {
            width: calc(64px * var(--scale, 1));
            height: calc(64px * var(--scale, 1));
        }
    </style>
}
